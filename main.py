import asyncio
import logging
from aiogram import Bot, Dispatcher, types
from aiogram.filters.command import Command
from aiogram.utils.keyboard import InlineKeyboardBuilder, ReplyKeyboardBuilder
from aiogram import F
from sqlite_database import (update_quiz_index, get_quiz_index, create_table, get_statistic, update_stat, db_edit_table,
                             update_zero, get_all_user_ids)
from quiz import quiz_data

# –í–∫–ª—é—á–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ, —á—Ç–æ–±—ã –Ω–µ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å –≤–∞–∂–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
logging.basicConfig(level=logging.INFO)

# –ó–∞–º–µ–Ω–∏—Ç–µ "YOUR_BOT_TOKEN" –Ω–∞ —Ç–æ–∫–µ–Ω, –∫–æ—Ç–æ—Ä—ã–π –≤—ã –ø–æ–ª—É—á–∏–ª–∏ –æ—Ç BotFather
API_TOKEN = '7890008278:AAHZeZjXozfuL0pbA5fGblLR7S_0aFMJpo4'

# –û–±—ä–µ–∫—Ç –±–æ—Ç–∞
bot = Bot(token=API_TOKEN)
# –î–∏—Å–ø–µ—Ç—á–µ—Ä
dp = Dispatcher()

async def get_question(message: types.Message, user_id):
    current_question_index = await get_quiz_index(user_id)
    question_data = quiz_data[current_question_index]

    question_text = question_data['question']
    options = question_data['options']
    builder = InlineKeyboardBuilder()
    for option in options:
        builder.add(types.InlineKeyboardButton(text=option, callback_data=f"answer_{option}"))

    builder.adjust(1)
    await message.answer(question_text, reply_markup=builder.as_markup())


# –•—ç–Ω–¥–ª–µ—Ä –Ω–∞ –∫–æ–º–∞–Ω–¥—É /start
@dp.message(Command("start"))
async def cmd_start(message: types.Message):
    builder = ReplyKeyboardBuilder()
    builder.add(types.KeyboardButton(text="–ù–∞—á–∞—Ç—å –∏–≥—Ä—É"))
    builder.add(types.KeyboardButton(text="–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"))
    await message.answer("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∫–≤–∏–∑(–°–¥–µ–ª–∞–Ω–æ –¥–ª—è –æ–±—É—á–µ–Ω–∏—è)!\n\n"
                         "–ï—Å—Ç—å —Ç–∞–∫–∏–µ –∫–æ–º–∞–Ω–¥—ã –∫–∞–∫: \n"
                         "/quiz - –¥–ª—è —Ç–æ–≥–æ, —á—Ç–æ –±—ã –Ω–∞—á–∞—Ç—å –∫–≤–∏–∑\n"
                         "/statistic - –¥–ª—è —Ç–æ–≥–æ, —á—Ç–æ –±—ã –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É\n\n"
                         "–î–ª—è –±–æ–ª—å—à–µ–≥–æ —É–¥–æ–±—Å—Ç–≤–∞ —Å–¥–µ–ª–∞–Ω—ã –∫–Ω–æ–ø–∫–∏üòâ", reply_markup=builder.as_markup(resize_keyboard=True))

@dp.message(F.text=="–ù–∞—á–∞—Ç—å –∏–≥—Ä—É")
@dp.message(Command("quiz"))
async def cmd_quiz(message: types.Message):
    await message.answer(f"–î–∞–≤–∞–π—Ç–µ –Ω–∞—á–Ω–µ–º –∫–≤–∏–∑!")
    await db_edit_table(user_id=message.from_user.id, index=0, stat=0)
    await new_quiz(message)

async def new_quiz(message):
    user_id = message.from_user.id
    await update_zero(user_id=user_id, index=0, stat=0)
    await get_question(message, user_id)

@dp.callback_query(F.data.startswith("answer_"))
async def answer(callback: types.CallbackQuery):
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏, –Ω–∞ –∫–æ—Ç–æ—Ä—É—é –Ω–∞–∂–∞–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    user_answer = callback.data.split("_", 1)[1]  # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç –ø–æ—Å–ª–µ "answer_"

    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω–¥–µ–∫—Å —Ç–µ–∫—É—â–µ–≥–æ –≤–æ–ø—Ä–æ—Å–∞
    current_question_index = await get_quiz_index(callback.from_user.id)

    # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç –∏–∑ –¥–∞–Ω–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–∞
    correct_option = quiz_data[current_question_index]['correct_option']
    correct_answer = quiz_data[current_question_index]['options'][correct_option]

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –ª–∏ –æ—Ç–≤–µ—Ç
    if user_answer == correct_answer:
        await callback.message.answer("–í–µ—Ä–Ω–æ!")
        statist = await get_statistic(callback.from_user.id)
        print(type(statist))
        new_statistic = int(statist) + 1
        print(new_statistic)
        await update_stat(callback.from_user.id, int(new_statistic))
    else:
        await callback.message.answer(f"–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ. –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: {correct_answer}")

    await callback.message.answer(f"–í–∞—à –æ—Ç–≤–µ—Ç: {user_answer}")

    # –£–¥–∞–ª—è–µ–º –∫–Ω–æ–ø–∫–∏
    await callback.bot.edit_message_reply_markup(
        chat_id=callback.from_user.id,
        message_id=callback.message.message_id,
        reply_markup=None
    )

    # –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω–¥–µ–∫—Å —Ç–µ–∫—É—â–µ–≥–æ –≤–æ–ø—Ä–æ—Å–∞
    current_question_index += 1
    await update_quiz_index(callback.from_user.id, current_question_index)

    # –ó–∞–¥–∞–µ–º —Å–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å –∏–ª–∏ –∑–∞–≤–µ—Ä—à–∞–µ–º –∫–≤–∏–∑
    if current_question_index < len(quiz_data):
        await get_question(callback.message, callback.from_user.id)
    else:
        await callback.message.answer("–≠—Ç–æ –±—ã–ª –ø–æ—Å–ª–µ–¥–Ω–∏–π –≤–æ–ø—Ä–æ—Å. –ö–≤–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω!")




@dp.message(F.text == "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
@dp.message(Command("statistic"))
async def statistic(message):
    statist = await get_statistic(message.from_user.id)
    my_id = message.from_user.id
    builder = ReplyKeyboardBuilder()
    builder.add(types.KeyboardButton(text="–ù–∞—á–∞—Ç—å –∏–≥—Ä—É"))
    builder.add(types.KeyboardButton(text="–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"))
    user_ids = await get_all_user_ids()
    print(f"–í—Å–µ user_id –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö: {user_ids}")
    await message.answer(f"–í–∞—à —Ä–µ–∫–æ—Ä–¥: {statist}", reply_markup=builder.as_markup(resize_keyboard=True))
    for i in user_ids:
        if i != my_id:
            await bot.send_message(chat_id=message.from_user.id,
                                   text=f"ID: {i} / –†–µ–∫–æ—Ä–¥: - {await get_statistic(i)}")




# –ó–∞–ø—É—Å–∫ –ø—Ä–æ—Ü–µ—Å—Å–∞ –ø–æ–ª–ª–∏–Ω–≥–∞ –Ω–æ–≤—ã—Ö –∞–ø–¥–µ–π—Ç–æ–≤
async def main():

    # –ó–∞–ø—É—Å–∫–∞–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    await create_table()

    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
